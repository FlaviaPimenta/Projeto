# coding: utf-8

import os
import re
import uuid
import json
import pika

#-------------------------------------------------------------------------------
# Configuração

server   = 'omf-ec'
port     = 5672
vhost    = '/'
username = 'guest'
passwd   = 'guest'

myid     = 'rc3' #hostname da máquina
mypid    = os.getpid() #Retorna o id do processo atual
myaddr   = 'amqp://{0}/frcp.{1}'.format(server, myid)

#-------------------------------------------------------------------------------
# Conexão AMQP
#Credencials encapsula toda a informação de autenticação da classe ConnectionParameters.
credentials = pika.PlainCredentials(username, passwd) #Retorna o formato correto de user e passwd para a conexao.
parameters  = pika.ConnectionParameters(server, port, vhost, credentials)
connection  = pika.BlockingConnection(parameters)

channel = connection.channel()

#-------------------------------------------------------------------------------
# Criar os exchanges e queues padrões

def create_topic(name):
    channel.exchange_declare(exchange=name, type='topic', durable=False, auto_delete=True)
    r = channel.queue_declare(exclusive=True, auto_delete=True, durable=False)
    q = r.method.queue
    channel.queue_bind(exchange=name, queue=q, routing_key='o.*')
    return q

def subscribe_topic(name):
    r = channel.queue_declare(exclusive=True, auto_delete=True, durable=False)
    q = r.method.queue
    channel.queue_bind(exchange=name, queue=q, routing_key='o.*')
    return q

#-------------------------------------------------------------------------------
# Criar as callbacks para tratar as mensagens

def omfrc_cb(ch, method, properties, body):
           #rc3 'o.op':corpo da mensagem
    print "[%s] %r:%r" % (myid, method.routing_key, body)
    msg = json.loads(body)

    # Ignorar mensagens enviadas por mim mesmo.
    if msg['src'] == myaddr :
        return
    	    
    #Mensagem CONFIGURE
    if msg['op'] == 'configure' and msg['props'] and msg['props']['membership']:
	
        patt = 'amqp://[^/]+/frcp.(.+)'
	
	print '---------------------------------------------------'	
	print '**CONFIGURE**'
        m = re.search(patt, msg['src'])
        src = m.group(1)
	print 'SEARCH: %s' %(src)
	print '[%s] source: %s' % (myid, src)
        
	m = re.search(patt, msg['props']['membership'])
        topic = m.group(1)
        print '[%s] membership: %s' % (myid, topic)
	print '---------------------------------------------------'
        
	# Informar ao EC que recebemos o pedido.
        #
        #{:src=>"amqp://omf-ec/frcp.omf-rc1", :cid=>"df55f8bf-b31a-47ed-9cd3-fc85730f650f",
        #:op=>"inform", :mid=>"588e55c1-3171-4cd7-bb7b-03a6b34d9aae", :ts=>1447167231,
        #:props=>{:membership=>[], :res_index=>0}, :replyto=>"omf-rc1", :itype=>"STATUS"}

        resp = {
            'src'     : myaddr,
            'cid'     : msg['mid'],
            'op'      : 'inform',
            'mid'     : str(uuid.uuid4()),
            'ts'      : msg['ts'],
            'replyto' : myid,
            'itype'   : 'STATUS',
            'props'   : {
                'membership' : [],
                'res_index'  : msg['props']['res_index']
            }
        }

        resp = json.dumps(resp)
        #print resp

        channel.basic_publish(exchange=myid,
                              routing_key='o.info',
                              body=resp,
                              properties=pika.BasicProperties(content_type='text/json'))

        # Se inscrever no exchange a pedido do EC e informá-lo.
        #
        #{:src=>amqp://omf-ec/frcp.omf-rc1, :type=>"node", :itype=>"STATUS", :op=>:inform,
        #:mid=>"99c1b348-c4a3-42fc-81ae-1d79c417c035", :ts=>1447167231,
        #:props=>{:membership=>["amqp://omf-ec/frcp.2015-11-10T14:53:51.501Z.Actor"]}}

        q = subscribe_topic(topic)
        channel.basic_consume(omfrc_cb, queue=q)

        resp = {
            'src'   : myaddr,
            'type'  : 'node',
            'itype' : 'STATUS',
            'op'    : 'inform',
            'mid'   : str(uuid.uuid4()),
            'ts'    : msg['ts'],
            'props' : {
                'membership' : [ msg['props']['membership'] ]
            }
        }

        resp = json.dumps(resp)
        #print resp

        channel.basic_publish(exchange=myid,
                              routing_key='o.info',
                              body=resp,
                              properties=pika.BasicProperties(content_type='text/json'))



#*********************REQUEST**************************
#VERIFICAR SE AS MENSAGENS ENVIADAS SÃO ESSAS.

    if msg['op'] == 'request' and msg['props'] and msg['props']['membership']:
        patt = 'amqp://[^/]+/frcp.(.+)'
	
	print '---------------------------------------------------'	
	print '**REQUEST**'
        m = re.search(patt, msg['src'])
        src = m.group(1)
	print '[%s] source: %s' % (myid, src)
        
	m = re.search(patt, msg['props']['membership'])
        topic = m.group(1)
        print '[%s] membership: %s' % (myid, topic)
	print '---------------------------------------------------'

	# 1) O EC recebe as informações das propriedades listadas no <props> da mensagem de requisição.
	# 2) Segue a mesma sintaxe do inform da mensagem de configure.
	# 3) Replyto para o meu próprio tópico. 
	# 	
	resp = {
            'src'     : myaddr,
            'cid'     : msg['mid'],
            'op'      : 'inform',
            'mid'     : str(uuid.uuid4()),
            'ts'      : msg['ts'],
            'replyto' : myid,
            'itype'   : 'STATUS',
            'props'   : {
                'membership' : [],
                'res_index'  : msg['props']['res_index'] # ou res_id 
            }
        }

        resp = json.dumps(resp)

        channel.basic_publish(exchange=myid,
                              routing_key='o.info',
                              body=resp,
                              properties=pika.BasicProperties(content_type='text/json'))

	# 4) Se inscrever no exchange a pedido do EC e informá-lo.
	#      	
	q = subscribe_topic(topic)
        channel.basic_consume(omfrc_cb, queue=q)

        resp = {
            'src'   : myaddr,
            'type'  : 'node',
            'itype' : 'STATUS',
            'op'    : 'inform',
            'mid'   : str(uuid.uuid4()),
            'ts'    : msg['ts'],
            'props' : {
                'membership' : [ msg['props']['membership'] ]
            }
        }

        resp = json.dumps(resp)
        channel.basic_publish(exchange=myid,
                              routing_key='o.info',
                              body=resp,
                              properties=pika.BasicProperties(content_type='text/json'))


	# 5) Replyto para outro tópico a pedido do EC.
	#	
        resp = {
            'src'     : myaddr,
            'type'    : 'node',
            'replyto' : msg['replyto'],
            'itype'   : 'STATUS',
            'op'      : 'inform',
            'mid'     : str(uuid.uuid4()),
            'ts'      : msg['ts'],
            'props'   : {
                'membership' : [ msg['props']['membership'] ]
            }
        }

        resp = json.dumps(resp)
        channel.basic_publish(exchange=myid,
                              routing_key='o.info',
                              body=resp,
                              properties=pika.BasicProperties(content_type='text/json'))	





#*********************CREATE**************************
# JsonMessage: {:src=>amqp://omf-ec/frcp.omf-rc1, :cid=>"783fe895-0ec9-4dad-a5ac-978ff6819151", :op=>:inform, 
# :mid=>"547f0084-ecc0-4107-b853-59e3d957d976", :ts=>1442954309, 
# :props=>{:res_id=>"amqp://omf-ec/frcp.bb5465d9-6f95-40f9-9494-fd59c8eacd0e", 
#	   :uid=>"bb5465d9-6f95-40f9-9494-fd59c8eacd0e", 
#	   :binary_path=>"/home/user/foo", 
#	   :hrn=>"aac46854-99b9-4c10-8ab0-7b428aa723a2", 
#	   :membership=>[], :type=>"application", 
#	   :address=>"amqp://omf-ec/frcp.bb5465d9-6f95-40f9-9494-fd59c8eacd0e"}, 
#	   :replyto=>"omf-rc1", :itype=>"CREATION.OK"}
#

    if msg['op'] == 'create' and msg['props'] and msg['props']['membership']:
	patt = 'amqp://[^/]+/frcp.(.+)'
	
	print '---------------------------------------------------'	
	print '**CREATE**'
	m = re.search(patt, msg['src'])
	src = m.group(1)
	print '[%s] source: %s' % (myid, src)
	
	m = re.search(patt, msg['props']['membership'])
	topic = m.group(1)
	print '[%s] membership: %s' % (myid, topic)
	print '---------------------------------------------------'

	resp = {
	    'src'     : myaddr,
	    'cid'     : msg['mid'],
	    'op'      : 'inform',
	    'mid'     : str(uuid.uuid4()),
	    'ts'      : msg['ts'],
	    'replyto' : myid,
	    'itype'   : 'CREATION.OK',
	    'props'   : {
		'res_id'     : [ msg['props']['res_id'] ],
		'uid'	     : str(uuid.uuid4()),
		'binary_path': [ msg['props']['binary_path'] ],
		'hrn'	     : [ msg['props']['hrn'] ],
	        'membership' : [ msg['props']['membership'] ],
	        'type'       : [ msg['props']['type'] ],
		'adress'     : 'uid'
	    }
	}

	resp = json.dumps(resp)
	channel.basic_publish(exchange=myid,
	                      routing_key='o.info',
	                      body=resp,
	                      properties=pika.BasicProperties(content_type='text/json'))




#CHAMADA DO OMFEC_CB
def omfrc_pid_cb(ch, method, properties, body):
    omfrc_cb(ch, method, properties, body)
    #omfrc_cb_create(ch, method, properties, body) A ideia e criar só para tratar create

#-------------------------------------------------------------------------------
# Cria os tópicos e associa as callbacks

queue1 = create_topic(myid)
queue2 = create_topic('{0}-{1}'.format(myid, mypid))

channel.basic_consume(omfrc_cb, queue=queue1, no_ack=True) #Consumer_tag será gerado automaticamente
channel.basic_consume(omfrc_pid_cb, queue=queue2, no_ack=True)

#-------------------------------------------------------------------------------
# Espera pelas mensagens

print 'RC running... to exit press CTRL+C'

channel.start_consuming()

